<!-- Idea for frontend:
    Show all travel plans.
    Button do add new plan opens modal:
        get all locations from rickandmortyapi, select one by name from dropdown input;
        button to add another stop that will show another dropdown, and so forth;
        button for sutbmit.
-->

<h1>Wrapper for Rick and Morty API</h1><br>
<h3>Travel Plans</h3>
<div id="travel-plans"></div>
<div class="buttons">
    <button id="optimize-button">Optimize</button>
    <button id="delete-button">Delete</button>
</div>

<div class="forms-container">
    <div>
        <h3>Post Travel Plan</h3>
        <form action="/travel_plans" method="post" id="post-form">
            <label for="post-text">Enter Travel Stops:</label><br>
            <div class="locations-container-post" id="travel-stops-post">
                <input type="hidden" id="selected-stops-post" name="selected-stops-post" value="">
                <button type="button"class=add-location id="add-stop-post">Add Stop</button>
            </div>
            <input type="submit" value="Submit">
        </form>
    </div>
    <div>
        <h3>Put Travel Plan</h3>
        <form id="put-form">
            <label for="put-plan-id">Enter Travel Plan ID:</label><br>
            <input type="text" id="put-id" name="put-id"><br>
            <label for="put-text">Enter Travel Stops:</label><br>
            <div class="locations-container-put" id="travel-stops-put">
                <input type="hidden" id="selected-stops-put" name="selected-stops-put" value="">
                <button type="button"class=add-location id="add-stop-put">Add Stop</button>
            </div>
            <input type="submit" value="Submit">
        </form>
    </div>
</div>

<script>
    let locationsCounter = 0;

    document.getElementById("post-form").addEventListener("submit", function(event) {
      event.preventDefault(); // Prevent the default form submission

      // Get the input text value
      let inputText = document.getElementById("selected-stops-post").value;
      let numbers = inputText.split(",").map(Number);

      // Send the request with the modified data using fetch
      fetch("/travel_plans", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ "travel_stops":  numbers })
      })
      .then(response => {
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        return response.text();
      })
      .then(data => {
        fetchAndDisplayTravelPlans();
        console.log(data); // Handle the response data as needed
      })
      .catch(error => {
        console.error("There was a problem with the fetch operation:", error);
      });
    });

    // Event listener for submitting the "Put Travel Plan" form
    document.getElementById("put-form").addEventListener("submit", function(event) {
      event.preventDefault(); // Prevent the default form submission

      // Get the input text value
      let inputText = document.getElementById("selected-stops-put").value;
      let numbers = inputText.split(",").map(Number);
      const planId = document.getElementById("put-id").value;

      fetch(`/travel_plans/${planId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ "travel_stops":  numbers })
      })
      .then(response => {
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        return response.text();
      })
      .then(data => {
        fetchAndDisplayTravelPlans();
        console.log(data); // Handle the response data as needed
      })
      .catch(error => {
        console.error("There was a problem with the fetch operation:", error);
      });
    });

    // Function to fetch and display travel plans
    function fetchAndDisplayTravelPlans() {
      fetch("/travel_plans?expand=true")
      .then(response => {
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        return response.json();
      })
      .then(data => {
        const travelPlansContainer = document.getElementById("travel-plans");

        // Clear existing travel plans
        travelPlansContainer.innerHTML = "";

        // Display each travel plan
        data.forEach(plan => {
          planContainer = document.createElement("div");
          planContainer.classList.add("plan-container")

          const planElement = document.createElement("p");
          planElement.textContent = "Plan ID: " + plan.id;
          planContainer.appendChild(planElement)

          const stops = plan.travel_stops;
          const stopsContainer = document.createElement("div")
          stopsContainer.classList.add("stops-container");
          stops.forEach(stop => {
            const stopElement = document.createElement("div");
            stopElement.innerHTML = `
              <strong>Id:</strong> ${stop.id}<br>
              <strong>Name:</strong> ${stop.name}<br>
              <strong>Type:</strong> ${stop.type}<br>
              <strong>Dimension:</strong> ${stop.dimension}<br>
              <br>
            `;
            stopsContainer.appendChild(stopElement);
          });
          planContainer.appendChild(stopsContainer);

          travelPlansContainer.appendChild(planContainer);
        });
      })
      .catch(error => {
        console.error("There was a problem with the fetch operation:", error);
      });
    }

    function addLocationsDropdown(options, post) {
        locationsCounter = locationsCounter + 1;
        if (!options) {
            throw new Error("No location options available");
        }
        const container = document.createElement("div");
        container.classList.add("dropdown-location-container")
        container.setAttribute("id","location-container-" + locationsCounter);

        const selectElement = document.createElement("select");
        selectElement.setAttribute("id","locations-dropdown-" + locationsCounter);
        selectElement.innerHTML = options.map(location => `<option value="${location.id}">${location.name}</option>`).join("");

        // Set the initial selected option
        selectElement.selectedIndex = 0;

        // Set the previously selected ID to the value of the initial selected option

        container.appendChild(selectElement);
        container.innerHTML += `<button type="button" id="remove-stop-${locationsCounter}">Remove Stop</button>`;

        // Append the container to the locations container
        if (post) {
            document.getElementById("travel-stops-post").appendChild(container);
        } else {
            document.getElementById("travel-stops-put").appendChild(container);
        }

        // Add event listener for this dropdown
        addDropdownChangeEventListener(locationsCounter, post);
        addDropdownDeleteEventListener(locationsCounter, post);
    }

    function addDropdownDeleteEventListener(locationsCounter, post) {
        document.getElementById("remove-stop-" + locationsCounter).addEventListener("click", function (event) {
            const selectElement = document.getElementById("locations-dropdown-" + locationsCounter);

            let selectedStopsInput = document.getElementById("selected-stops-post");
            if (!post) {
                selectedStopsInput = document.getElementById("selected-stops-put");
            }
            
            // Remove the previously selected ID if it exists
            let arr = selectedStopsInput.value.split(","); // Convert string to array

            let index = arr.indexOf(selectElement.getAttribute("data-prev-id").toString());
            if (index !== -1) {
                arr.splice(index, 1);
            }

            selectedStopsInput.value = arr.join(",");
            event.target.parentNode.remove();
        });
    }

    function addDropdownChangeEventListener(locationsCounter, post) {
        document.getElementById("locations-dropdown-" + locationsCounter).addEventListener("change", function(event) {
            // Get the selected option
            const selectElement = event.target;

            let selectedStopsInput = document.getElementById("selected-stops-post");
            if (!post) {
                selectedStopsInput = document.getElementById("selected-stops-put");
            }

            const previouslySelectedId = selectElement.getAttribute("data-prev-id");

            // Update the hidden input field with the selected travel stop IDs
            if (selectElement.value !== previouslySelectedId) {
                if (selectedStopsInput.value === "") {
                    selectedStopsInput.value = selectElement.value;
                } else {
                    if (selectedStopsInput.value.includes(previouslySelectedId)) {
                        // Remove the previously selected ID if it exists
                        let arr = selectedStopsInput.value.split(","); // Convert string to array

                        let index = arr.indexOf(previouslySelectedId.toString());
                        if (index !== -1) {
                            arr.splice(index, 1);
                        }

                        selectedStopsInput.value = arr.join(",");
                    }
                    
                    if (selectedStopsInput.value === "") {
                        selectedStopsInput.value = selectElement.value;
                    } else selectedStopsInput.value += "," + selectElement.value;
                }

                // Update the previously selected ID
                selectElement.setAttribute("data-prev-id", selectElement.value);
            }
        });
    }

    // Recursive function to fetch the remaining pages of locations
    function fetchLocations(remainingPages, url, allLocations) {
        return fetch(url)
            .then(response => response.json())
            .then(data => {
            // Add the locations from the current page to the allLocations array
            allLocations.push(...data.results);

            // Recursively fetch the remaining pages of locations
            if (remainingPages > 1) {
                remainingPages--;
                return fetchLocations(remainingPages, data.info.next, allLocations);
            } else {
                // Sort the allLocations array by alphabetical order
                allLocations.sort((a, b) => a.name.localeCompare(b.name));

                return allLocations;
            }
            });
    }

    document.addEventListener("DOMContentLoaded", function () {
        fetchAndDisplayTravelPlans();
        const locations = [];

        // Initial fetch of the first page of locations
        fetchLocations(6, "https://rickandmortyapi.com/api/location", locations)
            .then(() => {
                // Post form
                addLocationsDropdown(locations, true); // Post form

                // Set previous id for dropdown
                const postDropdown = document.getElementById("locations-dropdown-" + locationsCounter);
                postDropdown.setAttribute("data-prev-id", 2);
                // Set initial stop
                const selectedStopsInputPost = document.getElementById("selected-stops-post");
                selectedStopsInputPost.value = "2";

                document.getElementById("remove-stop-" + locationsCounter).addEventListener("click", function (event) {
                   // Remove the previously selected ID if it exists
                    let arr = selectedStopsInputPost.value.split(","); // Convert string to array

                    let index = arr.indexOf(postDropdown.getAttribute("data-prev-id").toString());
                    if (index !== -1) {
                        arr.splice(index, 1);
                    }

                    selectedStopsInputPost.value = arr.join(",");

                   event.target.parentNode.remove();
                });

                // Put form
                addLocationsDropdown(locations, false);
                // Set previous id for dropdown
                const putDropdown = document.getElementById("locations-dropdown-" + locationsCounter);
                putDropdown.setAttribute("data-prev-id", 2);
                // Set initial stop
                const selectedStopsInputPut = document.getElementById("selected-stops-post");
                selectedStopsInputPut.value = "2";

                document.getElementById("remove-stop-" + locationsCounter).addEventListener("click", function (event) {
                   // Remove the previously selected ID if it exists
                    let arr = selectedStopsInputPut.value.split(","); // Convert string to array

                    let index = arr.indexOf(putDropdown.getAttribute("data-prev-id").toString());
                    if (index !== -1) {
                        arr.splice(index, 1);
                    }

                    selectedStopsInputPut.value = arr.join(",");

                   event.target.parentNode.remove();
                });
            });
        
        // Handle add locations dropdowns
        document.getElementById("add-stop-post").addEventListener("click", function (event) {
            addLocationsDropdown(locations, true);

            // Set previous id for dropdown
            dropdown = document.getElementById("locations-dropdown-" + locationsCounter)
            dropdown.setAttribute("data-prev-id", 2);
            // Set initial input value
            const selectedStopsInput = document.getElementById("selected-stops-post");
            selectedStopsInput.value += ",2";
        });
        document.getElementById("add-stop-put").addEventListener("click", function (event) {
            addLocationsDropdown(locations, false);

            // Set previous id for dropdown
            dropdown = document.getElementById("locations-dropdown-" + locationsCounter)
            dropdown.setAttribute("data-prev-id", 2);
            // Set initial input value
            const selectedStopsInput = document.getElementById("selected-stops-put");
            selectedStopsInput.value += ",2";
        });

        // Handle optimize and delete buttons
        const optimizeButton = document.getElementById("optimize-button");
        const deleteButton = document.getElementById("delete-button");
        optimizeButton.disabled = true;
        deleteButton.disabled = true;

        // Handle travel plans selection
        document.addEventListener("click", function(event) {
            const stopsContainers = document.querySelectorAll(".stops-container");
            const clickedElement = event.target;

            // Check if the clicked element is within any stops container
            let isWithinStopsContainer = false;
            stopsContainers.forEach(container => {
                if (container.contains(clickedElement)) {
                    isWithinStopsContainer = true;
                }
            });

            // Select stops container
            if (isWithinStopsContainer) {
                const planContainer = clickedElement.closest(".plan-container");
                if (planContainer) {
                    // Get plan ID
                    const firstChild = planContainer.firstElementChild;
                    let planID = 0
                    if (firstChild && firstChild.textContent.trim().length > 0) {
                        const textContent = firstChild.textContent.trim();
                        const pattern = /Plan ID: (\d+)/;
                        const match = pattern.exec(textContent);
                        if (match && match.length > 1) {
                            planID = match[1];
                        }
                    }

                    // Remove active class from all stops containers
                    stopsContainers.forEach(container => {
                        container.classList.remove("active");
                        container.removeAttribute("id")
                    });

                    // Add active class to the stops container inside the clicked plan container
                    const stopsContainer = planContainer.querySelector(".stops-container");
                    if (stopsContainer) {
                        stopsContainer.classList.add("active");
                        stopsContainer.setAttribute("id", "selected-stops")
                    }

                    // Enable the optimize button
                    optimizeButton.disabled = false;
                    deleteButton.disabled = false;
                    optimizeButton.dataset.planId = planID;
                    deleteButton.dataset.planId = planID;
                }
            }

            // Unselect stops container
            if (!isWithinStopsContainer) {
                stopsContainers.forEach(container => {
                    container.classList.remove("active");
                });

                // Disable optimize button
                optimizeButton.disabled = true;
                deleteButton.disabled = true;
                optimizeButton.dataset.planId = 0;
                deleteButton.dataset.planId = 0;
            }
        });

        // Optimize button click
        document.getElementById("optimize-button").addEventListener("click", function (event) {
            const selectedPlanId = event.target.dataset.planId;

            fetch(`/travel_plans/${selectedPlanId}?optimize=true&expand=true`)
            .then(response => {
                if (!response.ok) {
                throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .then(plan => {
                const stopsContainer = document.getElementById("selected-stops")

                // Clear existing travel plan
                stopsContainer.innerHTML = "";

                // Display travel plan
                const stops = plan.travel_stops;
                stops.forEach(stop => {
                    const stopElement = document.createElement("div");
                    stopElement.innerHTML = `
                    <strong>Id:</strong> ${stop.id}<br>
                    <strong>Name:</strong> ${stop.name}<br>
                    <strong>Type:</strong> ${stop.type}<br>
                    <strong>Dimension:</strong> ${stop.dimension}<br>
                    <br>
                    `;
                    stopsContainer.appendChild(stopElement);
                });
            })
            .catch(error => {
                console.error("There was a problem with the fetch operation:", error);
            });
        });

        // Delete selected travel plan
        document.getElementById("delete-button").addEventListener("click", function(event) {
            const selectedPlanId = event.target.dataset.planId;

            fetch(`/travel_plans/${selectedPlanId}`, {
                method: "DELETE",
                headers: {
                "Content-Type": "application/json"
                }
            })
            .then(response => {
                if (!response.ok) {
                throw new Error("Network response was not ok");
                }
                return response.text();
            })
            .then(data => {
                fetchAndDisplayTravelPlans();
                console.log(data);
            })
            .catch(error => {
                console.error("There was a problem with the fetch operation:", error);
            });
        });
    })
</script>